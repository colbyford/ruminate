[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Harrold. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harrold J (2023). ruminate: Pharmacometrics Data Transformation Analysis Tool. R package version 0.1.0, https://ruminate.ubiquity.tools/.","code":"@Manual{,   title = {ruminate: A Pharmacometrics Data Transformation and Analysis Tool},   author = {John Harrold},   year = {2023},   note = {R package version 0.1.0},   url = {https://ruminate.ubiquity.tools/}, }"},{"path":"/index.html","id":"ruminate-","dir":"","previous_headings":"","what":"A Pharmacometrics Data Transformation and Analysis Tool","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"goal ruminate facilitate exploration pharmacometrics data. done creating Shiny interface different tools data transformation (dplyr tidyr), plotting (ggplot2), noncompartmental analysis (PKNCA). results can reported Excel, Word PowerPoint. state app can saved loaded later date. saved, script generated reproduce different actions Shiny interface.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"can install development version GitHub following: Note ruminate depends formods need first install development version formods.","code":"# install.packages(\"devtools\") devtools::install_github(\"john-harrold/formods\", dependencies=TRUE) devtools::install_github(\"john-harrold/ruminate\", dependencies=TRUE)"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"A Pharmacometrics Data Transformation and Analysis Tool","text":"","code":"library(ruminate) ruminate()"},{"path":"/reference/NCA_Server.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Non-Compartmental Analysis State — NCA_Server","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"Merges default app options changes made UI","code":""},{"path":"/reference/NCA_Server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"","code":"NCA_Server(   id,   FM_yaml_file = system.file(package = \"formods\", \"templates\", \"formods.yaml\"),   MOD_yaml_file = system.file(package = \"ruminate\", \"templates\", \"NCA.yaml\"),   id_ASM = \"ASM\",   id_UD = \"UD\",   id_DW = \"DW\",   react_state = NULL )"},{"path":"/reference/NCA_Server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"id ID string corresponds ID used call modules UI elements FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id_ASM ID string app state management module used save load app states id_UD ID string upload data module used save load app states id_DW ID string data wrangling module used save load app states react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"/reference/NCA_Server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Non-Compartmental Analysis State — NCA_Server","text":"list containing current state app including default values yaml file well changes made user. list following structure: yaml: Full contents supplied yaml file. MC: Module components yaml file. NCA: isgood: Boolean object indicating file successfully loaded. checksum: MD5 sum contents element can used detect changes state. MOD_TYPE: Character data containing type module \"NCA\" id: Character data containing module id module session variable. FM_yaml_file: App configuration file FM main section. MOD_yaml_file:  Module configuration file MC main section.","code":""},{"path":"/reference/NCA_add_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Analysis Interval to Current Analysis — NCA_add_int","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"Takes start time, stop time, NCA parameters adds intervals table","code":""},{"path":"/reference/NCA_add_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"","code":"NCA_add_int(state, interval_start, interval_stop, nca_parameters)"},{"path":"/reference/NCA_add_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"state NCA state NCA_fetch_state() interval_start Interval start time (numeric). interval_stop Interval stop time (numeric). nca_parameters list NCA parameters interval","code":""},{"path":"/reference/NCA_add_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Analysis Interval to Current Analysis — NCA_add_int","text":"State interval added current analysis.","code":""},{"path":"/reference/NCA_append_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Report Elements — NCA_append_report","title":"Append Report Elements — NCA_append_report","text":"Description","code":""},{"path":"/reference/NCA_append_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Report Elements — NCA_append_report","text":"","code":"NCA_append_report(state, rpt, rpttype, gen_code_only = FALSE)"},{"path":"/reference/NCA_append_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Report Elements — NCA_append_report","text":"state NCA state NCA_fetch_state() rpt Report current content report appended function. details structure see documentation FM_generate_report. rpttype Type report generate (supported \"xlsx\", \"pptx\", \"docx\"). gen_code_only Boolean value indicating code generated (FALSE).","code":""},{"path":"/reference/NCA_append_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Report Elements — NCA_append_report","text":"list containing following elements isgood:    Return status function. hasrptele: Boolean indicator module reportable elements. code:      Data wrangling R command. msgs:      Messages passed back user. rpt:       Report additions passed back user.","code":""},{"path":[]},{"path":"/reference/NCA_append_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append Report Elements — NCA_append_report","text":"","code":"# We need a state object to use below sess_res = NCA_test_mksession(session=list()) #> → UD: State initialized #> → UD: module checksum updated:48559d397570afc9fba8ad9b252fa75a #> → DW: State initialized #> → DW: module checksum updated:5a6adb8be080914162e848e04fb61f85 #> → DW: module checksum updated:a5d1d3b8a436befcfa119b5d72d3697b #> → DW: module checksum updated:48d9e35c3f568c7a6f72914538d4ecd4 #> → DW: module checksum updated:680bde3fe602684945b93dda69abc020 #> → DW: module checksum updated:1f571c6eabb372eff6c1ef806344b2e4 #> → DW: module checksum updated:a1632ef431da47f98334a9281270a3fd #> → DW: module checksum updated:518e56af743d086ea4b1b6070bf70472 #> → DW: module checksum updated:460fd6e3a4a46f56f17bde8ff4ef5c01 #> → DW: module checksum updated:12335ca5ced95462c2ed1df919a72d15 #> → DW: module checksum updated:0794933dac491313b32ca4bbfd996641 #> → DW: module checksum updated:75abe1a1cfc787fc68049b40c9e5749e #> → DW: module checksum updated:070868f0125fd16b3e648dc05be84cd0 #> → DW: module checksum updated:1da012ee43c59bf8bedc7376511d179e #> → DW: module checksum updated:6dfd06414929a762cc4f07d6d428289b #> → DW: module checksum updated:83f7106b33c98e7650432749c16d7a36 #> → DW: module checksum updated:32652abd1996af932cbdf304cc509bd0 #> → DW: module checksum updated:dfa171056875bc474e03e0c911ace2b6 #> → DW: module checksum updated:5d4dfb7affd116c593a856034804aa04 #> → DW: module checksum updated:f47016aa2630055e8a1ae44ab79cabd2 #> → DW: module checksum updated:46cc2c9503359a39be98c3c0b889851a #> → DW: module checksum updated:58ed3ad9e797e77eba05a2576b78e50f #> → DW: module checksum updated:aaf6ebcd2be24f05cd9b4776ef042986 #> → DW: module checksum updated:afbbf99a8ed5f01191217b8370603a9d #> → DW: module checksum updated:086f760681a2b47a9a1dfd572f876fcd #> → DW: module checksum updated:8c045cb5e0fe9bd74e84d87d3c6725b5 #> → DW: module checksum updated:779a7d3c81e58ea4c8a756c2e422fee0 #> → DW: module checksum updated:104438a337e6617c4504477506e90863 #> → DW: module checksum updated:1bd57823c76715ccceab0be02ed7a79e #> → DW: module checksum updated:8b901fc11d897dd27c774accf0eb7097 #> → DW: module checksum updated:7d55b640df1207dcdc56a10c9b8d8b87 #> → DW: module checksum updated:8d91f192ea994a133c8e2fbb7ce7c11a #> → DW: module checksum updated:d5c81022154ffb7347d7a30d66a38f60 #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading analysis scenario: sd_iv #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> → NCA: module checksum updated:4b6a10335f14b25490b6b17c88ea872e #> → NCA: loading analysis scenario: sd_iv #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Values from `PPORRES` are not uniquely identified; output will contain list-cols. #> * Use `values_fn = list` to suppress this warning. #> * Use `values_fn = {summary_fun}` to summarise duplicates. #> * Use the following dplyr code to identify duplicates. #>   {data} %>% #>     dplyr::group_by(ID, pnames) %>% #>     dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>% #>     dplyr::filter(n > 1L) #> → NCA: module checksum updated:60a317526b965f8ef3159a2c49d5e025 state = sess_res$state  rpt = list(summary = list(), sheets=list())  rpt_res = NCA_append_report(state,  rpt     = rpt,  rpttype = \"xlsx\")  # Shows if report elements are present rpt_res$hasrptele #> [1] TRUE  # Code chunk to generate report element cat(paste(rpt_res$code, collapse=\"\\n\")) #> rpt[[\"sheets\"]][[\"NCA_1_RES\"]]=NCA_1_table_ind_params[[\"one_table\"]] #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_1_RES\", #>     Description=\"PK NCA Analysis Example (indiviudal results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_1_RAW\"]]=as.data.frame(NCA_1_res) #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_1_RAW\", #>     Description=\"PK NCA Analysis Example (raw NCA results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_2_RES\"]]=NCA_2_table_ind_params[[\"one_table\"]] #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_2_RES\", #>     Description=\"PK/PD NCA Analysis Example (indiviudal results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_2_RAW\"]]=as.data.frame(NCA_2_res) #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_2_RAW\", #>     Description=\"PK/PD NCA Analysis Example (raw NCA results)\" #>   ) #> )  # Tabular summary of data views rpt_res$rpt$summary #>   Sheet_Name                                     Description #> 1  NCA_1_RES    PK NCA Analysis Example (indiviudal results) #> 2  NCA_1_RAW       PK NCA Analysis Example (raw NCA results) #> 3  NCA_2_RES PK/PD NCA Analysis Example (indiviudal results) #> 4  NCA_2_RAW    PK/PD NCA Analysis Example (raw NCA results) # We need a state object to use below sess_res = NCA_test_mksession(session=list()) #> → UD: State initialized #> → UD: module checksum updated:48559d397570afc9fba8ad9b252fa75a #> → DW: State initialized #> → DW: module checksum updated:5a6adb8be080914162e848e04fb61f85 #> → DW: module checksum updated:a5d1d3b8a436befcfa119b5d72d3697b #> → DW: module checksum updated:48d9e35c3f568c7a6f72914538d4ecd4 #> → DW: module checksum updated:680bde3fe602684945b93dda69abc020 #> → DW: module checksum updated:1f571c6eabb372eff6c1ef806344b2e4 #> → DW: module checksum updated:a1632ef431da47f98334a9281270a3fd #> → DW: module checksum updated:518e56af743d086ea4b1b6070bf70472 #> → DW: module checksum updated:460fd6e3a4a46f56f17bde8ff4ef5c01 #> → DW: module checksum updated:12335ca5ced95462c2ed1df919a72d15 #> → DW: module checksum updated:0794933dac491313b32ca4bbfd996641 #> → DW: module checksum updated:75abe1a1cfc787fc68049b40c9e5749e #> → DW: module checksum updated:070868f0125fd16b3e648dc05be84cd0 #> → DW: module checksum updated:1da012ee43c59bf8bedc7376511d179e #> → DW: module checksum updated:6dfd06414929a762cc4f07d6d428289b #> → DW: module checksum updated:83f7106b33c98e7650432749c16d7a36 #> → DW: module checksum updated:32652abd1996af932cbdf304cc509bd0 #> → DW: module checksum updated:dfa171056875bc474e03e0c911ace2b6 #> → DW: module checksum updated:5d4dfb7affd116c593a856034804aa04 #> → DW: module checksum updated:f47016aa2630055e8a1ae44ab79cabd2 #> → DW: module checksum updated:46cc2c9503359a39be98c3c0b889851a #> → DW: module checksum updated:58ed3ad9e797e77eba05a2576b78e50f #> → DW: module checksum updated:aaf6ebcd2be24f05cd9b4776ef042986 #> → DW: module checksum updated:afbbf99a8ed5f01191217b8370603a9d #> → DW: module checksum updated:086f760681a2b47a9a1dfd572f876fcd #> → DW: module checksum updated:8c045cb5e0fe9bd74e84d87d3c6725b5 #> → DW: module checksum updated:779a7d3c81e58ea4c8a756c2e422fee0 #> → DW: module checksum updated:104438a337e6617c4504477506e90863 #> → DW: module checksum updated:1bd57823c76715ccceab0be02ed7a79e #> → DW: module checksum updated:8b901fc11d897dd27c774accf0eb7097 #> → DW: module checksum updated:7d55b640df1207dcdc56a10c9b8d8b87 #> → DW: module checksum updated:8d91f192ea994a133c8e2fbb7ce7c11a #> → DW: module checksum updated:d5c81022154ffb7347d7a30d66a38f60 #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading analysis scenario: sd_iv #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> → NCA: module checksum updated:f2e415a63bcbb9e158e950ed09fdd4ee #> → NCA: loading analysis scenario: sd_iv #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Values from `PPORRES` are not uniquely identified; output will contain list-cols. #> * Use `values_fn = list` to suppress this warning. #> * Use `values_fn = {summary_fun}` to summarise duplicates. #> * Use the following dplyr code to identify duplicates. #>   {data} %>% #>     dplyr::group_by(ID, pnames) %>% #>     dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>% #>     dplyr::filter(n > 1L) #> → NCA: module checksum updated:70064a2ffe6ed99805b24c82b444be57 state = sess_res$state  # here we need an empty report object for tabular data rpt = list(summary = list(), sheets=list())  # Now we append the report indicating we want  # Excel output: rpt_res = NCA_append_report(state,   rpt     = rpt,   rpttype = \"xlsx\")  # Shows if report elements are present rpt_res$hasrptele #> [1] TRUE  # Code chunk to generate report element cat(paste(rpt_res$code, collapse=\"\\n\")) #> rpt[[\"sheets\"]][[\"NCA_1_RES\"]]=NCA_1_table_ind_params[[\"one_table\"]] #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_1_RES\", #>     Description=\"PK NCA Analysis Example (indiviudal results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_1_RAW\"]]=as.data.frame(NCA_1_res) #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_1_RAW\", #>     Description=\"PK NCA Analysis Example (raw NCA results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_2_RES\"]]=NCA_2_table_ind_params[[\"one_table\"]] #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_2_RES\", #>     Description=\"PK/PD NCA Analysis Example (indiviudal results)\" #>   ) #> ) #> rpt[[\"sheets\"]][[\"NCA_2_RAW\"]]=as.data.frame(NCA_2_res) #> rpt[[\"summary\"]] = rbind(rpt[[\"summary\"]], #>   data.frame( #>     Sheet_Name=\"NCA_2_RAW\", #>     Description=\"PK/PD NCA Analysis Example (raw NCA results)\" #>   ) #> )  # Tabular results from the first NCA analysis rpt_res$rpt$sheets$NCA_1_RES #>    ID auclast:[0,21] cmax:[0,21] aucinf.obs:[0,inf] #> 1  ID      AUC~last~      C~max~       AUC~inf,obs~ #> 2          day⋅ng/mL       ng/mL          day⋅ng/mL #> 3             [0,21]      [0,21]            [0,inf] #> 4   1           6140         816               9840 #> 5   2           8810        1230              17600 #> 6   3           6410         786               9800 #> 7   4           6390         824              11300 #> 8   5           8090        1150              16400 #> 9   6           6740         737              12900 #> 10  7           6780         679              13500 #> 11  8           7010         586              16600 #> 12  9           9370        1440              16800 #> 13 10           9100         951              16400 #> 14 11           6780         640              14700 #> 15 12           5360         675               8900 #> 16 13           8620        1060              16000 #> 17 14           5930         717              11300 #> 18 15           8760        1060              16800 #> 19 16           5760         643              10300 #> 20 17           9300         985              19800 #> 21 18           5800         574               9980 #> 22 19           8360        1060              16700 #> 23 20           6590         706              12600"},{"path":"/reference/NCA_fetch_PKNCA_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"Compiles Metadata PKNCA","code":""},{"path":"/reference/NCA_fetch_PKNCA_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"","code":"NCA_fetch_PKNCA_meta()"},{"path":"/reference/NCA_fetch_PKNCA_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches PKNCA Metadata — NCA_fetch_PKNCA_meta","text":"List containing data frames PKNCA meta data","code":""},{"path":"/reference/NCA_fetch_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Module Code — NCA_fetch_code","title":"Fetch Module Code — NCA_fetch_code","text":"Fetches code generate results seen app","code":""},{"path":"/reference/NCA_fetch_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Module Code — NCA_fetch_code","text":"","code":"NCA_fetch_code(state)"},{"path":"/reference/NCA_fetch_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Module Code — NCA_fetch_code","text":"state NCA state NCA_fetch_state()","code":""},{"path":"/reference/NCA_fetch_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Module Code — NCA_fetch_code","text":"Character object vector lines code","code":""},{"path":"/reference/NCA_fetch_current_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Current Analysis — NCA_fetch_current_ana","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"Takes NCA state returns current active analysis","code":""},{"path":"/reference/NCA_fetch_current_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"","code":"NCA_fetch_current_ana(state)"},{"path":"/reference/NCA_fetch_current_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"state NCA state NCA_fetch_state()","code":""},{"path":"/reference/NCA_fetch_current_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Current Analysis — NCA_fetch_current_ana","text":"List containing details current analysis. structure list structure state$NCA$anas output NCA_fetch_state().","code":""},{"path":"/reference/NCA_fetch_current_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches the Current Analysis Object — NCA_fetch_current_obj","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"Takes current state object type returns currently selected object. example specified figure, look output figure selected figure number figure return ggplot object . subject id highlighting certain NCA aspects (e.g. points used half-life)","code":""},{"path":"/reference/NCA_fetch_current_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"","code":"NCA_fetch_current_obj(state, obj_type)"},{"path":"/reference/NCA_fetch_current_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"state NCA state NCA_fetch_state() obj_type Type object return (either \"table\" \"figure\").","code":""},{"path":"/reference/NCA_fetch_current_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches the Current Analysis Object — NCA_fetch_current_obj","text":"list containing following elements","code":""},{"path":"/reference/NCA_fetch_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches Details About Data Requirements — NCA_fetch_data_format","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"Use get information data formats.","code":""},{"path":"/reference/NCA_fetch_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"","code":"NCA_fetch_data_format()"},{"path":"/reference/NCA_fetch_data_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"list details data formats","code":""},{"path":"/reference/NCA_fetch_data_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches Details About Data Requirements — NCA_fetch_data_format","text":"","code":"NCA_fetch_data_format() #>   sname              Column Required #> 1    id          Subject ID      yes #> 2  time                Time      yes #> 3 ntime        Nominal Time      yes #> 4  conc       Concentration      yes #> 5  dose                Dose      yes #> 6 route               Route      yes #> 7   dur Duration (optional)       no #> 8 cycle          Dose cycle      yes #>                                                                                                                          Description #> 1                                                                                                         Unique subject identifier. #> 2                                                                                        Time since the first dose. Must be numeric. #> 3                                                       Time since the last dose in the cycle (same units as Time). Must be numeric. #> 4                                          Observed concentration. Must be numeric, no NA values. Missing values should be set to 0. #> 5                                                                                             Value of dose given (must be numeric). #> 6 Doseing route. It should be either 'extravascular' or 'intravascular' but ruminate will make an effort to figure out other values. #> 7                                                 Doseing duration (same units as Time). If set to N/A a value of 0 will be assumed. #> 8                                                                                                                 Current dose cycle"},{"path":"/reference/NCA_fetch_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Module Datasets — NCA_fetch_ds","title":"Fetch Module Datasets — NCA_fetch_ds","text":"Fetches datasets contained module","code":""},{"path":"/reference/NCA_fetch_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Module Datasets — NCA_fetch_ds","text":"","code":"NCA_fetch_ds(state)"},{"path":"/reference/NCA_fetch_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Module Datasets — NCA_fetch_ds","text":"state NCA state NCA_fetch_state()","code":""},{"path":"/reference/NCA_fetch_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Module Datasets — NCA_fetch_ds","text":"Character object vector lines code list containing following elements isgood:    Return status function. hasds:     Boolean indicator module datasets msgs:      Messages passed back user. ds:        List datasets. list element name R-object dataset. element following structure: label: Text label dataset MOD_TYPE: Short name type module. id: module ID DS: Dataframe containing actual dataset. DSMETA: Metadata describing DS code: Complete code build dataset. checksum: Module checksum. DSchecksum: Dataset checksum.","code":""},{"path":"/reference/NCA_fetch_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch ruminate State — NCA_fetch_state","title":"Fetch ruminate State — NCA_fetch_state","text":"Merges default app options changes made UI","code":""},{"path":"/reference/NCA_fetch_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch ruminate State — NCA_fetch_state","text":"","code":"NCA_fetch_state(   id,   input,   session,   FM_yaml_file,   MOD_yaml_file,   id_ASM,   id_UD,   id_DW,   react_state )"},{"path":"/reference/NCA_fetch_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch ruminate State — NCA_fetch_state","text":"id Shiny module ID input Shiny input variable session Shiny session variable FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id_ASM ID string app state management module used save load app states id_UD ID string upload data module used save load app states id_DW ID string data wrangling module used save load app states react_state Variable passed server allow reaction outside module (NULL)","code":""},{"path":"/reference/NCA_fetch_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch ruminate State — NCA_fetch_state","text":"list containing current state app including default values yaml file well changes made user. list following structure: yaml: Full contents supplied yaml file. MC: Module components yaml file. NCA: ana_cntr:       Analysis counter. anas:                    List analyses: analysis following  structure: ana_dsview:       Dataset view/ID (name DSV) selected data source analysis. ana_scenario:     Analysis scenario selected UI checksum:         checksum analysis (used detect changes analysis). code:             Code generate analysis start finish error messages code generation/analysis failed. code_components:  List containing different components code col_conc:         Column ana_dsview containing concentration data. col_dose:         Column ana_dsview containing dose amount. col_dur:          Column ana_dsview containing infusion duration N/unused. col_group:        Columns ana_dsview containing grouping variables. col_id:           Column ana_dsview containing subject IDs. col_ntime:        Column ana_dsview containing nominal time values col_route:        Column ana_dsview containing dosing route. col_time:         Column ana_dsview containing time values. id:               Character id (ana_idx). idx:              Numeric id (1). include_units:    Boolean variable indicating units included analysis. interval_range:   Vector first element representing beginning interval second element containing end interval. intervals:        List intervals include. isgood:           Current status analysis. key:              Analysis key acts title/caption (user editable) msgs:             Messages generated checking configuration analysis options. nca_config:       List NCA configuration options analysis. nca_object_name:  Prefix NCA objects associated analyis. nca_parameters:   NCA parameters selected calculation UI. notes:            Analysis notes  (user editable) objs:             List names values objects created generated code. sampling:         Sampling method either \"sparse\" \"serial\" units_amt:        Amount units. units_conc:       Concentration units. units_dose:       Dosing units. units_time:       Time units. current_ana:           Currently selected analysis (list name element anas). DSV:                   Available data source views (see FM_fetch_ds) checksum:              MD5 sum module (checksum analysis checksums). nca_config:            List PKNCA configuration options analysis. nca_parameters:        List two elements choices:          List consisting \"Common Parameters\" \"\" (used grouping UI). list text parameter names value PKNCA parameter name. summary:          Summary table following columns: parameter:      PKNCA Paramter name. text:           Name used text output. md:             Name used markdown output. latex:          Name used latex output. description:    Verbose textual description parameter. ui:                    Current value form elements UI. ui_ana_map:            Map UI element names analysis object get NCA_fetch_current_ana ui_ids:                Vector UI elements module. ui_hold:               List hold elements disable updates full ui referesh complete. MOD_TYPE: Character data containing type module \"NCA\" id: Character data containing module id module session variable. FM_yaml_file: App configuration file FM main section. MOD_yaml_file:  Module configuration file MC main section.","code":""},{"path":"/reference/NCA_find_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines Default Column Name — NCA_find_col","title":"Determines Default Column Name — NCA_find_col","text":"Based current analysis, value UI, optional list patterns search, column names dataset function tries find default value column analysis (e.g. subject id, dose, concentration, etc). Generally following done: curr_ui non-NULL, non-\"\" value compared dscols. found value returned. patterns considered. patterns YAML file NULL compared sequentially columns names. first match found returned. nothing found first value dscols returned.","code":""},{"path":"/reference/NCA_find_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines Default Column Name — NCA_find_col","text":"","code":"NCA_find_col(   curr_ana = NULL,   curr_ui = NULL,   patterns = NULL,   dscols,   null_ok = FALSE )"},{"path":"/reference/NCA_find_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines Default Column Name — NCA_find_col","text":"curr_ana Current value analysis curr_ui Current value UI patterns List regular expression patterns consider. dscols Columns dataset. null_ok Logical value indicating null result (nothing found) OK (default: FALSE)","code":""},{"path":"/reference/NCA_find_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines Default Column Name — NCA_find_col","text":"Name column found based rules .","code":""},{"path":"/reference/NCA_init_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize NCA Module State — NCA_init_state","title":"Initialize NCA Module State — NCA_init_state","text":"Creates list initialized module state","code":""},{"path":"/reference/NCA_init_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize NCA Module State — NCA_init_state","text":"","code":"NCA_init_state(FM_yaml_file, MOD_yaml_file, id, id_UD, id_DW, session)"},{"path":"/reference/NCA_init_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize NCA Module State — NCA_init_state","text":"FM_yaml_file App configuration file FM main section. MOD_yaml_file Module configuration file MC main section. id ID string module. id_UD ID string upload data module used handle uploads name list element react_state data set stored. id_DW ID string data wrangling module process uploaded data session Shiny session variable (app) list (outside app)","code":""},{"path":"/reference/NCA_init_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize NCA Module State — NCA_init_state","text":"list containing empty NCA state","code":""},{"path":"/reference/NCA_load_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Markdown in flextable Object — NCA_load_scenario","title":"Render Markdown in flextable Object — NCA_load_scenario","text":"Takes flextable object renders markdown specified part.","code":""},{"path":"/reference/NCA_load_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Markdown in flextable Object — NCA_load_scenario","text":"","code":"NCA_load_scenario(state, ana_scenario)"},{"path":"/reference/NCA_load_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Markdown in flextable Object — NCA_load_scenario","text":"state NCA state NCA_fetch_state() ana_scenario Short name analysis scenario load config file.","code":""},{"path":"/reference/NCA_load_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Markdown in flextable Object — NCA_load_scenario","text":"NCA state object scenario loaded relevant notifications set.","code":""},{"path":"/reference/NCA_new_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize New Analysis — NCA_new_ana","title":"Initialize New Analysis — NCA_new_ana","text":"Creates new NCA analysis NCA module","code":""},{"path":"/reference/NCA_new_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize New Analysis — NCA_new_ana","text":"","code":"NCA_new_ana(state)"},{"path":"/reference/NCA_new_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize New Analysis — NCA_new_ana","text":"state NCA state NCA_fetch_state()","code":""},{"path":"/reference/NCA_new_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize New Analysis — NCA_new_ana","text":"NCA state object containing new empty analysis analysis set current active analyisis","code":""},{"path":"/reference/NCA_process_current_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Processes Current Analysis to be Run — NCA_process_current_ana","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"Takes current analysis checks different aspects issues make sure good go.","code":""},{"path":"/reference/NCA_process_current_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"","code":"NCA_process_current_ana(state)"},{"path":"/reference/NCA_process_current_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"state NCA state NCA_fetch_state()","code":""},{"path":"/reference/NCA_process_current_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processes Current Analysis to be Run — NCA_process_current_ana","text":"Current analysis list isgood msgs set","code":""},{"path":"/reference/NCA_set_current_ana.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets Current Analysis — NCA_set_current_ana","title":"Sets Current Analysis — NCA_set_current_ana","text":"Takes NCA state analysis list sets figure list value active figure","code":""},{"path":"/reference/NCA_set_current_ana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets Current Analysis — NCA_set_current_ana","text":"","code":"NCA_set_current_ana(state, ana)"},{"path":"/reference/NCA_set_current_ana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets Current Analysis — NCA_set_current_ana","text":"state NCA state NCA_fetch_state() ana Analysis list NCA_fetch_current_ana","code":""},{"path":"/reference/NCA_set_current_ana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets Current Analysis — NCA_set_current_ana","text":"State current analysis updated","code":""},{"path":"/reference/NCA_test_mksession.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Session Data for Module Testing — NCA_test_mksession","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"Populates supplied session variable testing.","code":""},{"path":"/reference/NCA_test_mksession.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"","code":"NCA_test_mksession(   session,   id = \"NCA\",   id_UD = \"UD\",   id_DW = \"DW\",   id_ASM = \"ASM\" )"},{"path":"/reference/NCA_test_mksession.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"session Shiny session variable (app) list (outside app) id ID string corresponds ID used call modules UI elements id_UD ID string corresponds ID used call UD modules UI elements id_DW ID string corresponds ID used call DW modules UI elements","code":""},{"path":"/reference/NCA_test_mksession.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"list following elements isgood: Boolean indicating exit status function. session: value Shiny session variable (app) list (outside app) initialization. input: value shiny input end session initialization. state: App state. rsc: react_state components.","code":""},{"path":"/reference/NCA_test_mksession.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate Session Data for Module Testing — NCA_test_mksession","text":"","code":"sess_res = NCA_test_mksession(session=list()) #> → UD: State initialized #> → UD: module checksum updated:48559d397570afc9fba8ad9b252fa75a #> → DW: State initialized #> → DW: module checksum updated:5a6adb8be080914162e848e04fb61f85 #> → DW: module checksum updated:a5d1d3b8a436befcfa119b5d72d3697b #> → DW: module checksum updated:48d9e35c3f568c7a6f72914538d4ecd4 #> → DW: module checksum updated:680bde3fe602684945b93dda69abc020 #> → DW: module checksum updated:1f571c6eabb372eff6c1ef806344b2e4 #> → DW: module checksum updated:a1632ef431da47f98334a9281270a3fd #> → DW: module checksum updated:518e56af743d086ea4b1b6070bf70472 #> → DW: module checksum updated:460fd6e3a4a46f56f17bde8ff4ef5c01 #> → DW: module checksum updated:12335ca5ced95462c2ed1df919a72d15 #> → DW: module checksum updated:0794933dac491313b32ca4bbfd996641 #> → DW: module checksum updated:75abe1a1cfc787fc68049b40c9e5749e #> → DW: module checksum updated:070868f0125fd16b3e648dc05be84cd0 #> → DW: module checksum updated:1da012ee43c59bf8bedc7376511d179e #> → DW: module checksum updated:6dfd06414929a762cc4f07d6d428289b #> → DW: module checksum updated:83f7106b33c98e7650432749c16d7a36 #> → DW: module checksum updated:32652abd1996af932cbdf304cc509bd0 #> → DW: module checksum updated:dfa171056875bc474e03e0c911ace2b6 #> → DW: module checksum updated:5d4dfb7affd116c593a856034804aa04 #> → DW: module checksum updated:f47016aa2630055e8a1ae44ab79cabd2 #> → DW: module checksum updated:46cc2c9503359a39be98c3c0b889851a #> → DW: module checksum updated:58ed3ad9e797e77eba05a2576b78e50f #> → DW: module checksum updated:aaf6ebcd2be24f05cd9b4776ef042986 #> → DW: module checksum updated:afbbf99a8ed5f01191217b8370603a9d #> → DW: module checksum updated:086f760681a2b47a9a1dfd572f876fcd #> → DW: module checksum updated:8c045cb5e0fe9bd74e84d87d3c6725b5 #> → DW: module checksum updated:779a7d3c81e58ea4c8a756c2e422fee0 #> → DW: module checksum updated:104438a337e6617c4504477506e90863 #> → DW: module checksum updated:1bd57823c76715ccceab0be02ed7a79e #> → DW: module checksum updated:8b901fc11d897dd27c774accf0eb7097 #> → DW: module checksum updated:7d55b640df1207dcdc56a10c9b8d8b87 #> → DW: module checksum updated:8d91f192ea994a133c8e2fbb7ce7c11a #> → DW: module checksum updated:d5c81022154ffb7347d7a30d66a38f60 #> → NCA: State initialized #> → NCA: State initialized #> → NCA: loading analysis scenario: sd_iv #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> → NCA: module checksum updated:826c2264095800774053522d9f866d46 #> → NCA: loading analysis scenario: sd_iv #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 1 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Too few points for half-life calculation (min.hl.points=3 with only 0 points) #> Warning: Values from `PPORRES` are not uniquely identified; output will contain list-cols. #> * Use `values_fn = list` to suppress this warning. #> * Use `values_fn = {summary_fun}` to summarise duplicates. #> * Use the following dplyr code to identify duplicates. #>   {data} %>% #>     dplyr::group_by(ID, pnames) %>% #>     dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>% #>     dplyr::filter(n > 1L) #> → NCA: module checksum updated:9412cde2148ae365ac4d277cb8bad61c"},{"path":"/reference/apply_route_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies Route Mapping to Dataset — apply_route_map","title":"Applies Route Mapping to Dataset — apply_route_map","text":"Compiles Metadata PKNCA","code":""},{"path":"/reference/apply_route_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies Route Mapping to Dataset — apply_route_map","text":"","code":"apply_route_map(route_map = list(), route_col = NULL, DS = NULL)"},{"path":"/reference/apply_route_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies Route Mapping to Dataset — apply_route_map","text":"route_map List names corresponding route replacement vector regular expressions match. route_col Column name route data. DS Dataframe containing dataset.","code":""},{"path":"/reference/apply_route_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies Route Mapping to Dataset — apply_route_map","text":"Dataset route mapping applied. library(readxl) #loading dataset data_file =  system.file(package=\"formods\",\"test_data\",\"TEST_DATA.xlsx\") myDS = readxl::read_excel(path=data_file, sheet=\"DATA\")        %>% route_map = list( intravascular = c(\"^(?)iv$\"), extravascular = c(\"^(?)sc$\", \"^(?)oral\") ) myDS = apply_route_map(myDS, route_col=ROUTE, route_map)","code":""},{"path":"/reference/build_span.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread Large Table Over Smaller Tables — build_span","title":"Spread Large Table Over Smaller Tables — build_span","text":"Takes large table spreads smaller tables paginate . preserve common row  information left separate columns according maximum specifications.","code":""},{"path":"/reference/build_span.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread Large Table Over Smaller Tables — build_span","text":"","code":"build_span(   table_body = NULL,   row_common = NULL,   table_body_head = NULL,   row_common_head = NULL,   header_format = \"text\",   obnd = NULL,   row_sel = NULL,   col_sel = NULL,   table_alignment = \"center\",   inner_border = officer::fp_border(color = \"black\", width = 0.3),   outer_border = officer::fp_border(color = \"black\", width = 2),   set_header_inner_border_v = TRUE,   set_header_inner_border_h = TRUE,   set_header_outer_border = TRUE,   set_body_inner_border_v = TRUE,   set_body_inner_border_h = FALSE,   set_body_outer_border = TRUE,   notes_detect = NULL )"},{"path":"/reference/build_span.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread Large Table Over Smaller Tables — build_span","text":"table_body Data frame body large table. row_common Data frame common rows. table_body_head Data frame matrix headers table body. row_common_head Data frame matrix headers common rows. header_format Format header either \"text\" (default) \"md\" markdown. obnd Optional onbrand object used format markdown. default NULL value use default formatting. row_sel Indices rows build table . col_sel Indices columns build table . table_alignment Character string specifying alignment #'table (body headers). Can \"center\" (default), \"left\", \"right\", \"justify\" inner_border Border object inner border lines defined using officer::fp_border() outer_border Border object outer border lines defined using officer::fp_border() set_header_inner_border_v Boolean value enable disable inner vertical borders headers set_header_inner_border_h Boolean value enable disable inner horizontal borders headers set_header_outer_border Boolean value enable disable outer border headers set_body_inner_border_v Boolean value enable disable inner vertical borders body set_body_inner_border_h Boolean value enable disable inner horizontal borders body set_body_outer_border Boolean value enable disable outer border borders body notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")).","code":""},{"path":"/reference/build_span.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread Large Table Over Smaller Tables — build_span","text":"list following elements df:     Data frame built table. ft:     data frame flextable object. notes:  Note placeholders found table.","code":""},{"path":"/reference/build_span.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spread Large Table Over Smaller Tables — build_span","text":"way data frames relate mapped . dimensions different data frames identified (nrow x ncol)","code":"#                            col_sel #                      |<--------------->| # #|--------------------------------------------| --- #|                 |   .                 .    |  ^ #|                 |   .                 .    |  | #| row_common_head |   . table_body_head .    |  | m #|      m x n      |   .      m x c      .    |  | #|                 |   .                 .    |  v #|--------------------------------------------| --- #|                 |   .                 .    |  ^ #|                 |   .                 .    |  | #|    row_common   |   .   table_body    .    |  | #|      r x n      |   .     r x c       .    |  | #|                 |   .                 .    |  | #|.................|..........................|  |     - #|                 |   ./  /  /  /  /  / .    |  |     ^ #|                 |   .  /  /  /  /  /  .    |  | r   | #|                 |   . /  /  /  /  /  /.    |  |     | row_sel #|                 |   ./  /  /  /  /  / .    |  |     | #|                 |   .  /  /  /  /  /  .    |  |     v #|.................|...../../../../../../.... |  |     - #|                 |   .                 .    |  | #|                 |   .                 .    |  v #|--------------------------------------------| --- # #|<--------------->|<------------------------>| #        n                    c"},{"path":"/reference/build_span.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread Large Table Over Smaller Tables — build_span","text":"","code":"library(formods) library(readxl) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr)  # First we need to create some data.  # This will read in a test dataset: DS = readxl::read_excel(  path  = system.file(package=\"formods\",                       \"test_data\",                       \"TEST_DATA.xlsx\"),  sheet = \"DATA\")  # This will filter the dataset down and modify the formatting DS = dplyr::filter(DS, EVID == 0)                          |>   dplyr::filter(ID <= 30)                                  |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT  = ifelse(.data[[\"CMT\"]] == \"C_ng_ml\",                               \"Test Article\",                               .data[[\"CMT\"]]))              |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT = ifelse(.data[[\"CMT\"]] == \"BM_ng_ml\",                              \"Biomarker\",                              .data[[\"CMT\"]]))               |>   dplyr::rename(Analyte = \"CMT\")                           |>   dplyr::mutate(DV = ifelse(.data[[\"DV\"]] == 0, \"BQL\", .data[[\"DV\"]]))  # This represents the large table we want to split up into smaller tables  wide_df = tidyr::pivot_wider(DS,   values_from = \"DV\",   names_from  = \"ID\")               |>   dplyr::arrange(Analyte, TIME)     |>   dplyr::mutate(TIME = as.character(.data[[\"TIME\"]]))      # The first two columns represent the rows # that are common across the tables: row_common = wide_df[,1:2]  # The remaining columns represent the body of the table: table_body = wide_df[,3:ncol(wide_df)]  # Next we create matrices that contain the header  # information for each component above: row_common_head = matrix(   data  = c(\"Time\", \"Analyte\",             \"(hr)\", \"(ng/ml)\"),   ncol  = 2,   byrow = TRUE)  table_body_head = matrix(   data  = c(rep(\"Subject ID\", times=ncol(table_body)),              names(table_body)),   ncol  = ncol(table_body),   byrow = TRUE)   # This builds all of the tables: span_res = span_table(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       notes_detect    = c(\"BQL\"))  # This will show you the first one: span_res$tables[[\"Table 1\"]]$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`  #> header has 2 row(s)  #> body has 20 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4  # This will build a single table with the rows and  # column ranges specified bs_res =   build_span(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       col_sel         = c(1:10),                       row_sel         = c(1:10),                       notes_detect    = c(\"BQL\"))  # This will show you the result: bs_res$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`  #> header has 2 row(s)  #> body has 10 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6   7    8    9    10 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 643 1050 1130   744 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 644 1051 1134 745.9 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 645 1052 1138 747.8 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 647 1055 1146 751.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4 651 1059 1162 759.2"},{"path":"/reference/ft_apply_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Markdown in flextable Object — ft_apply_md","title":"Render Markdown in flextable Object — ft_apply_md","text":"Takes flextable object renders markdown specified part.","code":""},{"path":"/reference/ft_apply_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Markdown in flextable Object — ft_apply_md","text":"","code":"ft_apply_md(ft, obnd = NULL, part = \"body\")"},{"path":"/reference/ft_apply_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Markdown in flextable Object — ft_apply_md","text":"ft Flextable object. obnd Optional onbrand object used format markdown. default NULL value use default formatting. part Part table can one \"\", \"body\" (default), \"header\", \"footer\"","code":""},{"path":"/reference/ft_apply_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Markdown in flextable Object — ft_apply_md","text":"flextable markdown applied","code":""},{"path":"/reference/mk_figure_ind_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"Takes output PKNCA creates ggplot figures faceted subject id highlighting certain NCA aspects (e.g. points used half-life)","code":""},{"path":"/reference/mk_figure_ind_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"","code":"mk_figure_ind_obs(   nca_res,   OBS_LAB = \"Concentration ===CONCUNITS===\",   TIME_LAB = \"Time ===TIMEUNITS===\",   OBS_STRING = \"Observation\",   BLQ_STRING = \"BLQ\",   NA_STRING = \"Missing\",   log_scale = TRUE,   scales = \"fixed\",   nfrows = 4,   nfcols = 3 )"},{"path":"/reference/mk_figure_ind_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"nca_res Output PKNCA. OBS_LAB Label observation axis optional ===CONCUNITS=== placeholder units. TIME_LAB Label time axis optional ===TIMEUNITS=== placeholder units. OBS_STRING Label observation data. BLQ_STRING Label BLQ data. NA_STRING Label missing data. log_scale Boolean variable control y-scale (TRUE: Log 10, FALSE: linear). scales String determine scales used faceting. Can either \"fixed\", \"free\", \"free_x\", \"free_y\". nfrows Number facet rows per page. nfcols Number facet cols per page.","code":""},{"path":"/reference/mk_figure_ind_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates Figures of Individual Observations from PKNCA Result — mk_figure_ind_obs","text":"list containing following elements","code":""},{"path":"/reference/mk_table_ind_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"Takes output PKNCA creates tabular view individual observation data. can spread several tables (pages) necessary.","code":""},{"path":"/reference/mk_table_ind_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"","code":"mk_table_ind_obs(   nca_res,   not_sampled = \"NS\",   blq = \"BLQ\",   digits = 3,   max_col = 9,   rows_by = \"time\" )"},{"path":"/reference/mk_table_ind_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"nca_res Output PKNCA. not_sampled Character string use missing data pivoting. blq Character string use indicate BLQ data. digits Number significant figures report (set NULL disable rounding) max_col Maximum number columns page. Spillover wrapped multiple pages. rows_by Can either \"time\" \"id\". \"time\", column time separate column subject ID. rows_by set \"id\" column ID column individual time.","code":""},{"path":"/reference/mk_table_ind_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates Tables of Individual Observations from PKNCA Result — mk_table_ind_obs","text":"list containing following elements","code":""},{"path":"/reference/mk_table_nca_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Tabular Output from PKNCA Results — mk_table_nca_params","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"Create paginated tables PKNCA use reports Shiny apps.","code":""},{"path":"/reference/mk_table_nca_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"","code":"mk_table_nca_params(   nca_res,   type = \"individual\",   grouping = \"interval\",   not_calc = \"NC\",   obnd = NULL,   nps = NULL,   mult_str = \"*\",   infinity = \"inf\",   digits = 3,   max_row = NULL,   max_col = NULL )"},{"path":"/reference/mk_table_nca_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"nca_res Output PKNCA. type Type table generate. Can either \"individual\" \"summary\"]. grouping group columns tables. Can either \"interval\" \"parameter\"]. not_calc Text string replace NA values indicated values calculated. obnd onbrand reporting object. nps NCA parameter summary table following columns. parameter:      PKNCA Paramter name. text:           Name used text output. md:             Name used markdown output. latex:          Name used latex output. description:    Verbose textual description parameter. mult_str Text string replace * values units. infinity Text string replace infinity time intervals column headers. digits Number significant figures report (set NULL disable rounding) max_row Maximum number rows page. Spillover hang side page.. max_col Maximum number columns page. Spillover wrapped multiple pages.","code":""},{"path":"/reference/mk_table_nca_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Tabular Output from PKNCA Results — mk_table_nca_params","text":"list containing following elements raw_nca: Raw PKNCA output. isgood:  Boolean indicating exit status function. msgs:    Vector text messages describing errors found. tables:  Named list tables. list element output format build_span().","code":""},{"path":"/reference/nca_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds NCA Code from ui Elements — nca_builder","title":"Builds NCA Code from ui Elements — nca_builder","text":"Takes current analysis state object creates code run analysis","code":""},{"path":"/reference/nca_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds NCA Code from ui Elements — nca_builder","text":"","code":"nca_builder(state)"},{"path":"/reference/nca_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds NCA Code from ui Elements — nca_builder","text":"state NCA state NCA_fetch_state() JMH update return list ","code":""},{"path":"/reference/nca_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds NCA Code from ui Elements — nca_builder","text":"list containing following elements isgood:           Return status function. msgs:             Messages passed back user. code_previous:    Code generate dataset. code_ana_only:    Code analysis. code_fg_ind_obs:  Code generate figure(s) individual observations code_tb_ind_obs:  Code generate table(s) individual observations code:             Complete code run analysis. obj:              List names R objects used generated code.","code":""},{"path":"/reference/ruminate-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ruminate: A Pharmacometrics Data Transformation and Analysis Tool — ruminate-package","title":"ruminate: A Pharmacometrics Data Transformation and Analysis Tool — ruminate-package","text":"Exploration pharmacometrics data data involves general tools (transformation plotting) specific techniques (non-compartmental analysis). kind exploration generally accomplished utilizing different packages. purpose 'ruminate' create Shiny interface make tools broadly available creating reproducible results.","code":""},{"path":"/reference/ruminate-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ruminate: A Pharmacometrics Data Transformation and Analysis Tool — ruminate-package","text":"Maintainer: John Harrold john.m.harrold@gmail.com (ORCID)","code":""},{"path":"/reference/ruminate.html","id":null,"dir":"Reference","previous_headings":"","what":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"done creating Shiny interface different tools data transformation (dplyr tidyr), plotting (ggplot2), noncompartmental analysis (PKNCA). results can reported Excel, Word PowerPoint. state app can saved loaded later date. saved, script generated reproduce different actions Shiny interface. Runs pharmacometrics ruminate app.","code":""},{"path":"/reference/ruminate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"","code":"ruminate()"},{"path":"/reference/ruminate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"Nothing.","code":""},{"path":[]},{"path":"/reference/ruminate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ruminate: Shiny app and module to facilitate pharamacometrics analysis — ruminate","text":"Maintainer: John Harrold john.m.harrold@gmail.com (ORCID)","code":""},{"path":"/reference/run_nca_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs NCA for the Current Analysis — run_nca_components","title":"Runs NCA for the Current Analysis — run_nca_components","text":"Takes current state runs current analysis state.","code":""},{"path":"/reference/run_nca_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs NCA for the Current Analysis — run_nca_components","text":"","code":"run_nca_components(   state,   components = c(\"nca\", \"fg_ind_obs\", \"tb_ind_obs\", \"tb_ind_params\") )"},{"path":"/reference/run_nca_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs NCA for the Current Analysis — run_nca_components","text":"state NCA state NCA_fetch_state() components List components run. default run following. just need regenerate figure based current nca results can just specify component. valid components: nca:               Run NCA analysis fg_ind_obs:    Build figure(s) indiviudal observations. tb_ind_obs:     Build table(s) indiviudal observations.","code":""},{"path":"/reference/run_nca_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs NCA for the Current Analysis — run_nca_components","text":"List following components: isgood:    Return status function. msgs:      Error messages issues encountered. nca_res:   PKNCA results run successful.","code":""},{"path":"/reference/run_ruminate.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the ruminate Shiny App — run_ruminate","title":"Run the ruminate Shiny App — run_ruminate","text":"Runs pharmacometrics ruminate app.","code":""},{"path":"/reference/run_ruminate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the ruminate Shiny App — run_ruminate","text":"","code":"run_ruminate()"},{"path":"/reference/run_ruminate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the ruminate Shiny App — run_ruminate","text":"Nothing.","code":""},{"path":"/reference/span_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread Large Table Over Smaller Tables — span_table","title":"Spread Large Table Over Smaller Tables — span_table","text":"Takes large table spreads smaller tables paginate . preserve common row  information left separate columns according maximum specifications. final tables widths less equal max_col max_width, heights less equal max_row max_height.","code":""},{"path":"/reference/span_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread Large Table Over Smaller Tables — span_table","text":"","code":"span_table(   table_body = NULL,   row_common = NULL,   table_body_head = NULL,   row_common_head = NULL,   header_format = \"text\",   obnd = NULL,   max_row = 20,   max_col = 10,   max_height = 7,   max_width = 6.5,   table_alignment = \"center\",   inner_border = officer::fp_border(color = \"black\", width = 0.3),   outer_border = officer::fp_border(color = \"black\", width = 2),   set_header_inner_border_v = TRUE,   set_header_inner_border_h = TRUE,   set_header_outer_border = TRUE,   set_body_inner_border_v = TRUE,   set_body_inner_border_h = FALSE,   set_body_outer_border = TRUE,   notes_detect = NULL )"},{"path":"/reference/span_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread Large Table Over Smaller Tables — span_table","text":"table_body Data frame body large table. row_common Data frame common rows. table_body_head Data frame matrix headers table body. row_common_head Data frame matrix headers common rows. header_format Format header either \"text\" (default) \"md\" markdown. obnd Optional onbrand object used format markdown. default NULL value use default formatting. max_row Maximum number rows output tables (value NULL set max_row number rows table). max_col Maximum number columns output tables (value NULL set max_col number columns table). max_height Maximum height final table inches (value NULL use 100 inches). max_width Maximum width final table inches (value NULL use 100 inches). table_alignment Character string specifying alignment #'table (body headers). Can \"center\" (default), \"left\", \"right\", \"justify\" inner_border Border object inner border lines defined using officer::fp_border() outer_border Border object outer border lines defined using officer::fp_border() set_header_inner_border_v Boolean value enable disable inner vertical borders headers set_header_inner_border_h Boolean value enable disable inner horizontal borders headers set_header_outer_border Boolean value enable disable outer border headers set_body_inner_border_v Boolean value enable disable inner vertical borders body set_body_inner_border_h Boolean value enable disable inner horizontal borders body set_body_outer_border Boolean value enable disable outer border borders body notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")).","code":""},{"path":"/reference/span_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread Large Table Over Smaller Tables — span_table","text":"list following elements isgood: Boolean indicating exit status function. msgs:   Vector text messages describing errors found. tables: Named list tables. list element output format build_span().","code":""},{"path":"/reference/span_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spread Large Table Over Smaller Tables — span_table","text":"way data frames relate mapped . dimensions different data frames identified (nrow x ncol)","code":"#|-------------------------------------| --- #|                 |                   |  ^ #|                 |                   |  | #| row_common_head |  table_body_head  |  | m #|      m x n      |       m x c       |  | #|                 |                   |  v #|-------------------------------------| --- #|                 |                   |  ^ #|                 |                   |  | #|    row_common   |    table_body     |  | r #|      r x n      |      r x c        |  | #|                 |                   |  | #|                 |                   |  v #|-------------------------------------| --- # #|<--------------->|<----------------->| #        n                   c"},{"path":[]},{"path":"/reference/span_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread Large Table Over Smaller Tables — span_table","text":"","code":"library(formods) library(readxl) library(dplyr) library(tidyr)  # First we need to create some data.  # This will read in a test dataset: DS = readxl::read_excel(  path  = system.file(package=\"formods\",                       \"test_data\",                       \"TEST_DATA.xlsx\"),  sheet = \"DATA\")  # This will filter the dataset down and modify the formatting DS = dplyr::filter(DS, EVID == 0)                          |>   dplyr::filter(ID <= 30)                                  |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT  = ifelse(.data[[\"CMT\"]] == \"C_ng_ml\",                               \"Test Article\",                               .data[[\"CMT\"]]))              |>   dplyr::select(ID, TIME, DV, CMT)                         |>   dplyr::mutate(CMT = ifelse(.data[[\"CMT\"]] == \"BM_ng_ml\",                              \"Biomarker\",                              .data[[\"CMT\"]]))               |>   dplyr::rename(Analyte = \"CMT\")                           |>   dplyr::mutate(DV = ifelse(.data[[\"DV\"]] == 0, \"BQL\", .data[[\"DV\"]]))  # This represents the large table we want to split up into smaller tables  wide_df = tidyr::pivot_wider(DS,   values_from = \"DV\",   names_from  = \"ID\")               |>   dplyr::arrange(Analyte, TIME)     |>   dplyr::mutate(TIME = as.character(.data[[\"TIME\"]]))      # The first two columns represent the rows # that are common across the tables: row_common = wide_df[,1:2]  # The remaining columns represent the body of the table: table_body = wide_df[,3:ncol(wide_df)]  # Next we create matrices that contain the header  # information for each component above: row_common_head = matrix(   data  = c(\"Time\", \"Analyte\",             \"(hr)\", \"(ng/ml)\"),   ncol  = 2,   byrow = TRUE)  table_body_head = matrix(   data  = c(rep(\"Subject ID\", times=ncol(table_body)),              names(table_body)),   ncol  = ncol(table_body),   byrow = TRUE)   # This builds all of the tables: span_res = span_table(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       notes_detect    = c(\"BQL\"))  # This will show you the first one: span_res$tables[[\"Table 1\"]]$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`  #> header has 2 row(s)  #> body has 20 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4  # This will build a single table with the rows and  # column ranges specified bs_res =   build_span(table_body      = table_body,                       row_common      = row_common,                       table_body_head = table_body_head,                       row_common_head = row_common_head,                       col_sel         = c(1:10),                       row_sel         = c(1:10),                       notes_detect    = c(\"BQL\"))  # This will show you the result: bs_res$ft #> a flextable object. #> col_keys: `TIME`, `Analyte`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`  #> header has 2 row(s)  #> body has 10 row(s)  #> original dataset sample:  #>   TIME   Analyte    1    2     3    4    5     6   7    8    9    10 #> 1    0 Biomarker 1250 1030   831 1170 1140   868 643 1050 1130   744 #> 2 0.25 Biomarker 1255 1032 832.2 1172 1145 869.4 644 1051 1134 745.9 #> 3  0.5 Biomarker 1259 1034 833.4 1174 1149 870.9 645 1052 1138 747.8 #> 4    1 Biomarker 1269 1037 835.8 1178 1158 873.7 647 1055 1146 751.7 #> 5    2 Biomarker 1287 1045 840.5 1186 1176 879.4 651 1059 1162 759.2"},{"path":"/reference/span_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread Large Table Over Smaller Tables — span_tables","title":"Spread Large Table Over Smaller Tables — span_tables","text":"Takes large","code":"# ----------------------------------------- #                 | # row_common_head |  table_body_head #                 | # ----------------------------------------- #                 | #                 | #                 | #    row_common   |   table_body #                 | #                 | #                 | #                 | #                 | # -----------------------------------------"},{"path":"/reference/span_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread Large Table Over Smaller Tables — span_tables","text":"","code":"span_tables(   table_body,   row_common,   table_body_head,   row_common_ead,   row_common_hl = NULL,   notes_detect )"},{"path":"/reference/span_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread Large Table Over Smaller Tables — span_tables","text":"table_body JMH row_common JMH table_body_head JMH row_common_ead JMH row_common_hl JMH notes_detect JMH","code":""},{"path":"/reference/span_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread Large Table Over Smaller Tables — span_tables","text":"list following elements isgood: Boolean indicating exit status function.","code":""},{"path":[]}]
